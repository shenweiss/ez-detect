using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.ComponentModel;
using System.IO;
using Path = System.IO.Path;
using System.Diagnostics;

namespace EzDetectGUI
{
    /// Window objects

    public partial class MainWindow : Window, INotifyPropertyChanged
    {
        public App App { get; set; } = ((App)Application.Current);
        private BackgroundWorker _bgWorker = new BackgroundWorker();
        private int _workerState;
        public event PropertyChangedEventHandler PropertyChanged;
        public int WorkerState
        {
            get { return _workerState; }
            set
            {
                _workerState = value;
                if (PropertyChanged != null)
                    PropertyChanged(this, new PropertyChangedEventArgs("WorkerState"));
            }
        }
        public void UpdateProgress(int progressState) { this.WorkerState = progressState; }
        public string[] MontageNames { get; set; }
        public string RunPythonScript(string pythonPath, string scriptPath, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = Path.GetFileName(pythonPath);
            start.WorkingDirectory = Path.GetDirectoryName(pythonPath);
            start.Arguments = string.Format("\"{0}\" \"{1}\"", scriptPath, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    return reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                }
            }
        }
        public void GetMontages()
        {
            string pythonPath = "C:/Users/tpastore/AppData/Local/Programs/Python/Python35/python.exe";
            string scriptPath = "C:/Users/tpastore/Documents/ez_detect_gui/montage_names.py"; //returns comma separated name list
            string args = this.App.TrcTempPath;
            string script_stream = RunPythonScript(pythonPath, scriptPath, args);
            this.MontageNames = script_stream.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        }
        public void GetTrcDuration()
        {
            string pythonPath = "C:/Users/tpastore/AppData/Local/Programs/Python/Python35/python.exe"; 
            string scriptPath = "C:/Users/tpastore/Documents/ez_detect_gui/trc_duration.py";
            string args = this.App.TrcTempPath;
            string duration_snds = RunPythonScript(pythonPath, scriptPath, args);
            this.Slider_start.Maximum = double.Parse(duration_snds, System.Globalization.CultureInfo.InvariantCulture);
            this.Slider_stop.Maximum = this.Slider_start.Maximum;

        }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;
            GetMontages();
            GetTrcDuration();
            UpdateProgress(5);
        }

        //******************************   EVENTS   ******************************

        //Montages
        private void ComboBox_suggested_montage_Loaded(object sender, RoutedEventArgs e)
        {
            foreach ( string name in this.MontageNames )
            {
                ComboBox_suggested_montage.Items.Add(name);
            }
        }

        private void ComboBox_suggested_montage_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox c = sender as ComboBox;
            this.App.SuggestedMontage = c.SelectedItem.ToString();

        }
        private void ComboBox_bp_montage_Loaded(object sender, RoutedEventArgs e)
        {
            foreach (string name in this.MontageNames)
            {
                ComboBox_bp_montage.Items.Add(name);
            }
        }
        private void ComboBox_bp_montage_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox c = sender as ComboBox;
            this.App.BpMontage = c.SelectedItem.ToString();

        }

        //TIME_WINDOW (START AND STOP TIME)
        private void Slider_start_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            Slider s = sender as Slider;
            this.App.StartTime = (int)s.Value;
        }
        private void Slider_stop_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            Slider s = sender as Slider;
            this.App.StopTime = (int)s.Value;
        }

        //Paralellizing with cycle time
        private void Chk_box_run_parallel_Checked(object sender, RoutedEventArgs e)
        {
            this.c_time_1_rBtn.IsEnabled = true;
            this.c_time_2_rBtn.IsEnabled = true;
            this.c_time_3_rBtn.IsEnabled = true;
            this.c_time_4_rBtn.IsEnabled = true;
        }

        private void Chk_box_run_parallel_Unchecked(object sender, RoutedEventArgs e)
        {
            this.c_time_1_rBtn.IsChecked = false;
            this.c_time_2_rBtn.IsChecked = false;
            this.c_time_3_rBtn.IsChecked = false;
            this.c_time_4_rBtn.IsChecked = false;
            this.App.CycleTime = -1;

            this.c_time_1_rBtn.IsEnabled = false;
            this.c_time_2_rBtn.IsEnabled = false;
            this.c_time_3_rBtn.IsEnabled = false;
            this.c_time_4_rBtn.IsEnabled = false;
        }

        private void RadioButton_1_Checked(object sender, RoutedEventArgs e)
        {
            RadioButton r = sender as RadioButton;
            this.App.CycleTime = Convert.ToInt32(r.Content) * 60;
        }
        private void RadioButton_2_Checked(object sender, RoutedEventArgs e)
        {
            RadioButton r = sender as RadioButton;
            this.App.CycleTime = Convert.ToInt32(r.Content) * 60;
        }
        private void RadioButton_3_Checked(object sender, RoutedEventArgs e)
        {
            RadioButton r = sender as RadioButton;
            this.App.CycleTime = Convert.ToInt32(r.Content) * 60;
        }
        private void RadioButton_4_Checked(object sender, RoutedEventArgs e)
        {
            RadioButton r = sender as RadioButton;
            this.App.CycleTime = Convert.ToInt32(r.Content) * 60;
        }

        //RUN BUTTON
        public void CloseWithMessage(string msg)
        {
            MessageBox.Show(msg);
            this.Close();
        }

        private void RunBtn_Click(object sender, RoutedEventArgs e)
        {
            if (this.App.SuggestedMontage == "" || this.App.BpMontage == "")
            {
                MessageBox.Show("Montage selections are required.");
            }
            else if (this.App.StartTime > this.App.StopTime)
            {
                MessageBox.Show("Stop time must be greater or equal to start time.");
            }
            else if ((bool)this.Chk_box_run_parallel.IsChecked && this.App.CycleTime == -1)
            {
                MessageBox.Show("Please select a cycle time.");
            }
            else
            {
                if (this.App.CycleTime == -1) this.App.CycleTime = this.App.StopTime - this.App.StopTime + 1;

                _bgWorker.DoWork += (s, f) =>
                {
                    this.App.RunEzDetect();
                    this.UpdateProgress(100);
                    
                };
                _bgWorker.RunWorkerAsync();
                
            }
        }

    }
}
