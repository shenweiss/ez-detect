function [Y,Xf,Af] = fripple_nn(X,~,~)

%% desired threshold is 0.63

%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 27-Mar-2018 16:37:43.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [22;0.473568608640599;0.474302559564772;-7032934769.90928;0.316467712615945;0.0235396555326601];
x1_step1.gain = [8.17651459712268e-06;0.022859061586476;0.022859200101671;2.84376283502127e-10;0.0406571463945017;0.288622138632961];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.5426792113264706785;-1.4965914150308112784;-1.2052607685653324854;3.2706053979837266255;-6.7674224040146810921;-0.05072386595761857464;0.0034446763664809643135;1.112092596753072371;-0.67810905829164691561;1.8320848693172189225];
IW1_1 = [-0.75850448631033740021 -0.18302459853408012402 -0.67973174749863951583 0.93695790543493673308 0.69574811725200369494 0.73543836357876735121;0.9445096301381834536 0.84743740647853915693 0.28740709672063863289 0.63163238039678393232 1.0289384510964485475 1.2186043319676245211;-5.7737135921063540422 0.10462459594288547882 -0.10169613517807843395 -2.8394274450772902796 -1.1843222661402572626 3.2382389773447184389;-0.20095908696870318222 -1.4700375236426230785 -0.11316104820264830111 2.1858058420804171718 -0.45536667381630901996 -2.661298222198761998;0.069054326032638266297 0.92125225264229393396 2.5641849356599224485 -4.0912769524680818733 2.8993278392195791504 2.5517766281934868289;0.53721318123939332256 0.59578724480751621417 0.46247239168664283637 -1.3245647356519487658 1.256244486920263137 0.91109997613389714921;0.68190175283547926899 -1.0451412993489566094 -1.8720695317570887894 -0.097628043118581961379 -0.73787046787112153812 -0.58345876530107543267;0.84582765395062986524 0.35702396090894533698 -1.628776910824156765 -0.62221638186271210902 -0.52140529989378114895 -0.41751027884221730835;0.96307342481656488253 -2.0731084812887083935 -4.4662558408515504738 2.6531677012531176274 -2.6971852931318078817 -1.7576929406773225129;0.62290894205858882149 -1.9030799825542161763 0.1247116328988189804 1.4248507152379703555 -0.15167941171976678794 -1.3394244131574950529];

% Layer 2
b2 = 1.7745960778972329486;
LW2_1 = [0.24385047380553664942 0.30317213310258961378 -5.2020795074696781768 0.41516852300120088426 1.2882708367401527472 0.78459048487087734713 -2.5073404578166496037 -0.29529775522522228037 -1.4890742806495267381 1.0335499236552392333];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    disp(X{1,ts});
    disp(x1_step1);
    disp(size(X));
    disp(size(x1_step1));
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n,~)
a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
